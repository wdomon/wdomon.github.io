<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>EntraID on Admin Brain Dump</title><link>https://adminbraindump.com/tags/entraid/</link><description>Recent content in EntraID on Admin Brain Dump</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 25 Aug 2024 08:15:56 -0700</lastBuildDate><atom:link href="https://adminbraindump.com/tags/entraid/index.xml" rel="self" type="application/rss+xml"/><item><title>Restrict Graph API Permissions for Exchange Online or Teams/Sharepoint Online</title><link>https://adminbraindump.com/post/restrict-graph-api/</link><pubDate>Sun, 25 Aug 2024 08:15:56 -0700</pubDate><guid>https://adminbraindump.com/post/restrict-graph-api/</guid><description>&lt;p>Graph API permissions via EntraID app registrations have become even more popular over the last couple of years. While they are definitely an upgrade over old school &amp;ldquo;service accounts,&amp;rdquo; granting an app access to an Exchange Online(EXO) mailbox or a Teams/Sharepoint Online(SPO) site using Graph API permissions can result in far more permissions being granted than are needed (or realized).&lt;/p>
&lt;p>Many 3rd party applications/vendors, and even flows built within your own Power Automate tenant, etc. will request an app registration with a list of Graph API permissions that their app &amp;ldquo;needs.&amp;rdquo; If this app requires the ability to access a single mailbox, for example, they will request &lt;code>Mail.Read&lt;/code> or &lt;code>Mail.ReadWrite&lt;/code> as the application permission they need. However, what some people don&amp;rsquo;t pick up on is that this is actually granting this app permission to access EVERY mailbox in the entire tenant; shared mailboxes, user mailboxes, resource mailboxes, the CEO/CFO&amp;rsquo;s mailbox&amp;hellip; you get the point. Granting &lt;code>Sites.Read.All&lt;/code> or &lt;code>Sites.ReadWrite.All&lt;/code> do the same for every Teams/OneDrive/SPO site as well. Luckily, Microsoft has introduced features in Microsoft Graph that provide more granular control over app access to specific SPO/Teams site collections and Exchange Online mailboxes. This post will walk you through the process of configuring these features to ensure that your applications only have access to the necessary resources.&lt;/p>
&lt;h3 id="scoping-microsoft-graph-permissions-for-exchange-online-mailboxes">Scoping Microsoft Graph Permissions for Exchange Online Mailboxes&lt;/h3>
&lt;p>A significant enhancement is the ability to scope Microsoft Graph permissions to specific Exchange Online mailboxes using the Application Access Policy feature. This is particularly useful in scenarios where an app needs to access only a subset of mailboxes within an organization. This feature is actually just a configuration within EXO using the &lt;a class="link" href="https://www.powershellgallery.com/packages/ExchangeOnlineManagement/3.5.1" target="_blank" rel="noopener"
>ExchangeOnlineManagement&lt;/a> Powershell module and not with MS Graph itself.&lt;/p>
&lt;h4 id="configure-application-access-policy">Configure Application Access Policy&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>Connect to Exchange Online PowerShell: First, connect to Exchange Online PowerShell. You can use the Azure Cloud Shell or any other preferred method to do this.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Identify the App and Security Group: Identify your app’s clientID and either create a new mail-enabled security group or use an existing one; identify the email address of this group. This group will be used to control the app&amp;rsquo;s access to specific mailboxes. You will add the user account for each mailbox the app needs to access as members of the group (including the disabled accounts associated with shared mailboxes).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Create an Application Access Policy: Run the following command to create a policy that restricts the app’s access to the mailboxes within the specified security group&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>$appId = &amp;lt;insert clientID of app registration&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$groupId = &amp;lt;insert email address of mail-enabled security group&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>New-ApplicationAccessPolicy -AppId $appId -PolicyScopeGroupId $groupId -AccessRight RestrictAccess -Description &lt;span style="color:#e6db74">&amp;#34;Scopes down appregX to just mailboxes in groupY&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>NOTE: This often takes 1-2 hours to take effect once created&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>As you can see, the restriction is actually behing handled by Exchange so the app still has the broad permissions that were originally requested but in practice it will get an &amp;ldquo;Access Denied&amp;rdquo; if it tries to access any mailbox that is not in the group. By using this policy, you can ensure that your application only accesses the mailboxes that are explicitly needed, improving your organization’s security and compliance posture.&lt;/p>
&lt;h3 id="restricting-app-access-to-teamssharepoint-online-site-collections">Restricting App Access to Teams/SharePoint Online Site Collections&lt;/h3>
&lt;p>As mentioned previously, granting application permissions for SPO/Teams via Microsoft Graph was an all-or-nothing proposition, with apps having access to all site collections within a tenant. However, Microsoft has introduced a new permission called &lt;code>Sites.Selected&lt;/code>, which allows administrators to limit app access to specific site collections. Unlike the access policy outlined above, this is done within MS Graph itself by replacing the requested &lt;code>Sites.Read.All&lt;/code> or &lt;code>Sites.ReadWrite.All&lt;/code> permissions with the &lt;code>Sites.Selected&lt;/code> instead.&lt;/p>
&lt;h4 id="steps-to-configure-access">Steps to Configure Access:&lt;/h4>
&lt;p>While technically granting your application access to a particular site collection only requires a single API call, there&amp;rsquo;s a process that you&amp;rsquo;ll need to follow in order to accomplish that call:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Assign the &lt;code>Sites.Selected&lt;/code> Permission&lt;/strong>:
Begin by assigning the &lt;code>Sites.Selected&lt;/code> permission to your application. This can be done in the EntraID app registration portal. By default, this permission does &lt;strong>NOT&lt;/strong> grant access to any site collections.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Create/use an app registration that has &lt;code>Sites.FullControl.All&lt;/code> (appregA)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>This will be used to APPLY the permission to the restricted app registration&lt;/li>
&lt;li>A temporary app registration can be created for this as long as it is deleted afterwards&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Create/identify an app registration that has Sites.Selected (appregB)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>This will be granted the API permission to the targeted Teams/SPO site(s)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>API call to output an access token for appregA&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Type: &lt;code>POST&lt;/code>&lt;/li>
&lt;li>Uri: &lt;code>https://login.microsoftonline.com/&amp;lt;tenantId&amp;gt;/oauth2/v2.0/token&lt;/code>&lt;/li>
&lt;li>Body
&lt;ul>
&lt;li>Grant_Type: &lt;code>client_credentials&lt;/code>&lt;/li>
&lt;li>Scope: &lt;code>https://graph.microsoft.com/.default&lt;/code>&lt;/li>
&lt;li>Client_Id: &lt;code>&amp;lt;clientID fo appregA&amp;gt;&lt;/code>&lt;/li>
&lt;li>Client_Secret: &lt;code>&amp;lt;clientSecret of appregA&amp;gt;&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Copy value of &amp;ldquo;access_token&amp;rdquo; in response&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>API call to find &amp;ldquo;siteID&amp;rdquo; of Teams/SPO site(s) wanting to allow an app registration to&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Type: &lt;code>GET&lt;/code>&lt;/li>
&lt;li>Uri: &lt;code>https://graph.microsoft.com/v1.0/sites/uticorp.sharepoint.com:/sites/&amp;lt;displayNameOfSite&amp;gt;&lt;/code>&lt;/li>
&lt;li>Authorization: &lt;code>&amp;quot;Bearer &amp;lt;access token for appregA&amp;gt;&amp;quot;&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Copy middle value of &amp;ldquo;id&amp;rdquo; in response&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&amp;ldquo;id&amp;rdquo; in response will contain a comma-separated string and the siteID is the middle value&lt;/li>
&lt;li>Example:&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>API call to apply Teams/SPO site permissions to appregB&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Type: &lt;code>POST&lt;/code>&lt;/li>
&lt;li>Uri: &lt;code>https://graph.microsoft.com/v1.0/sites/&amp;lt;siteID&amp;gt;/permissions&lt;/code>&lt;/li>
&lt;li>Authorization: &lt;code>&amp;quot;Bearer &amp;lt;access token for appregA&amp;gt;&amp;quot;&lt;/code>&lt;/li>
&lt;li>Body:
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;roles&amp;#34;: [&amp;#34;write&amp;#34;],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;grantedToIdentities&amp;#34;: [{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;application&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;id&amp;#34;: &amp;#34;&amp;lt;clientID of appregB&amp;gt;&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;displayName&amp;#34;: &amp;#34;&amp;lt;DisplayName of appregB&amp;gt;&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>Insert the clientID and DisplayName of appregB in the above body and the siteID in the Uri with the ID of the site collection you want to grant access to. Microsoft provides the following roles:
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Role Name&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>read&lt;/td>
&lt;td>Read-only&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>write&lt;/td>
&lt;td>Adds Write and related bits&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>manage&lt;/td>
&lt;td>Adds Manage Lists / Designer and related bits&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>fullcontrol&lt;/td>
&lt;td>All permissions&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>If access to more than one site is needed, just call the permissions endpoint for each site and respective role the app registration needs.&lt;/p>
&lt;p>While obviously this is more cumbersome than granting the originally requested permission, this approach provides a more secure method of managing application permissions, ensuring that apps only interact with specific site collections, thus reducing the risk of unauthorized access.&lt;/p>
&lt;h3 id="examples">Examples&lt;/h3>
&lt;p>&lt;img src="https://adminbraindump.com/post/restrict-graph-api/getBearerToken.png"
width="720"
height="636"
srcset="https://adminbraindump.com/post/restrict-graph-api/getBearerToken_hu5458827622032969681.png 480w, https://adminbraindump.com/post/restrict-graph-api/getBearerToken_hu10630132615768919918.png 1024w"
loading="lazy"
alt="Get Bearer Token"
class="gallery-image"
data-flex-grow="113"
data-flex-basis="271px"
>
&lt;img src="https://adminbraindump.com/post/restrict-graph-api/getSiteID.png"
width="720"
height="531"
srcset="https://adminbraindump.com/post/restrict-graph-api/getSiteID_hu17229586570458206775.png 480w, https://adminbraindump.com/post/restrict-graph-api/getSiteID_hu13577386426811082080.png 1024w"
loading="lazy"
alt="Get siteID"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="325px"
>
&lt;img src="https://adminbraindump.com/post/restrict-graph-api/emailFailing.png"
width="1131"
height="365"
srcset="https://adminbraindump.com/post/restrict-graph-api/emailFailing_hu1608701126365362989.png 480w, https://adminbraindump.com/post/restrict-graph-api/emailFailing_hu18090683315262391397.png 1024w"
loading="lazy"
alt="Email Failing Properly"
class="gallery-image"
data-flex-grow="309"
data-flex-basis="743px"
>
&lt;img src="https://adminbraindump.com/post/restrict-graph-api/emailWorking.png"
width="1081"
height="551"
srcset="https://adminbraindump.com/post/restrict-graph-api/emailWorking_hu12642075313533132518.png 480w, https://adminbraindump.com/post/restrict-graph-api/emailWorking_hu17732853269987000793.png 1024w"
loading="lazy"
alt="Email Working"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="470px"
>
&lt;img src="https://adminbraindump.com/post/restrict-graph-api/teamsFailing.png"
width="948"
height="475"
srcset="https://adminbraindump.com/post/restrict-graph-api/teamsFailing_hu17249025439854996100.png 480w, https://adminbraindump.com/post/restrict-graph-api/teamsFailing_hu9077682590099019477.png 1024w"
loading="lazy"
alt="Teams/SPO Failing Properly"
class="gallery-image"
data-flex-grow="199"
data-flex-basis="478px"
>
&lt;img src="https://adminbraindump.com/post/restrict-graph-api/teamsWorking.png"
width="1059"
height="532"
srcset="https://adminbraindump.com/post/restrict-graph-api/teamsWorking_hu4582836064697577380.png 480w, https://adminbraindump.com/post/restrict-graph-api/teamsWorking_hu18077073963194081764.png 1024w"
loading="lazy"
alt="Teams Working"
class="gallery-image"
data-flex-grow="199"
data-flex-basis="477px"
>&lt;/p></description></item><item><title>Create EntraID (AzureAD) Guest Users with Additional Attributes using MS Graph</title><link>https://adminbraindump.com/post/azuread-guest-users/</link><pubDate>Sun, 27 Aug 2023 09:00:50 -0700</pubDate><guid>https://adminbraindump.com/post/azuread-guest-users/</guid><description>&lt;h5 id="update-011024">Update 01/10/24&lt;/h5>
&lt;p>Microsoft currently has a feature called &lt;a class="link" href="https://learn.microsoft.com/en-us/entra/identity/multi-tenant-organizations/multi-tenant-organization-overview" target="_blank" rel="noopener"
>Multi-tenant Organization (MTO)&lt;/a> in public preview that manages the creation, enable/disabling, and deletion of Guest accounts between different tenants. Microsoft advertises an improved collaborative experience when working with users from the other organization &lt;del>but, so far in my experience, while the automatic sync/management of Guest accounts is a plus - the collaborative experience is actually worse once MTO is involved.&lt;/del>&lt;/p>
&lt;h5 id="update-031624">Update 03/16/24&lt;/h5>
&lt;p>While MTO is still in preview, Microsoft has made great strides towards what I would consider a feature that is close to GA-ready. I have now been using MTO to sync roughly 5,000 total users between two tenants and despite some initial rockiness it has been smooth for the better part of 60 days. For end-users to be able to find each other in the GAL has been a widely praised feature and being able to leverage SSO configurations via Enterprise App means to allow users from the other tenant to SSO into a SaaS application now only requires a few minutes of effort rather than configuring SSO from scratch again (or worse, finding that the SaaS vendor only supports a single IdP). At the time of this writing, I would recommend MTO for any M&amp;amp;A scenario where users need to collaborate within MS Teams or access shared SaaS applications.&lt;/p>
&lt;h2 id="original-post">Original post&lt;/h2>
&lt;p>Over the last decade or so, Microsoft has done a terrible job at addressing needs for Mergers and Acquisitions of medium to large businesses. They have provided almost no tooling and the features that exist often fall short of being production worthy in an M&amp;amp;A scenario. In many of these scenarios, there is often a business need to get the staff of a newly acquired company to access the parent company&amp;rsquo;s existing platforms (HRIS, ERP, etc). For this, using EntraID (AzureAD) Guest accounts can often provide this access without having to complete a full identity migration of those users into the parent tenant.&lt;/p>
&lt;p>EntraID B2B/Guest user accounts are a very powerful and flexible way to grant individuals outside of your primary tenant access to things as if they are within your tenant. A great example of this is Single SignOn (SSO) access to a third party SaaS application that you need contractors, or users from a newly acquired business, to access. Unfortunately (at the time of writing), even using the most modern methods for creating Guest Users like leveraging MS Graph does not allow for many attributes of a user account to be set at the time of creation; even attributes as basic as First Name or Last Name. These attributes are often passed through SSO configurations, like SAML or OIDC, as claims and are required for these Guest Users to be able to authenticate through SSO. Until Microsoft addresses this, the best course of action is to create all of the Guest Accounts and then take another pass through them to apply the necessary attributes. I recently had this scenario play out after my company acquired another and we needed all of their hiring managers and recruiters (about 300 in total) to access our SaaS recruiting platform. In this post, we will go over a script I wrote to handle all of the steps needed to complete this process.&lt;/p>
&lt;h3 id="prerequisites">Prerequisites&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.powershellgallery.com/packages/Microsoft.Graph" target="_blank" rel="noopener"
>Microsoft Graph Powershell Module&lt;/a>&lt;/li>
&lt;li>EntraID subscription&lt;/li>
&lt;li>Graph API permissions for &lt;code>User.Invite.All&lt;/code>,&lt;code>User.ReadWrite.All&lt;/code>, and &lt;code>Directory.ReadWrite.All&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="ingest-list-of-users">Ingest list of users&lt;/h3>
&lt;p>The first thing I had the other company provide me was a CSV that contains the three key pieces of information we needed to for each user: FirstName, LastName, and EmailAddress. When I received it, I noticed that the FirstName was in all caps but for cleanliness&amp;rsquo; sake I didn&amp;rsquo;t want these Guest Users to have names in all caps; we&amp;rsquo;ll address this later in the script. (If you&amp;rsquo;re ever sending data to be used programmatically, please don&amp;rsquo;t be &amp;ldquo;that guy&amp;rdquo;; make sure the formatting is decent)&lt;/p>
&lt;p>&lt;img src="https://adminbraindump.com/post/azuread-guest-users/Import-Csv.png"
width="418"
height="295"
srcset="https://adminbraindump.com/post/azuread-guest-users/Import-Csv_hu2415264789609545984.png 480w, https://adminbraindump.com/post/azuread-guest-users/Import-Csv_hu8417695367970960552.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="340px"
>&lt;/p>
&lt;h3 id="connect-to-ms-graph">Connect to MS Graph&lt;/h3>
&lt;p>Connecting to MS Graph using the Powershell module is pretty straight forward: &lt;code>Connect-MgGraph&lt;/code>. One thing people tend to forget is to identify the permissions ahead of time that you&amp;rsquo;ll need in order to perform the tasks at hand. For this, we will need &lt;code>User.Invite.All&lt;/code>,&lt;code>User.ReadWrite.All&lt;/code>, and &lt;code>Directory.ReadWrite.All&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://adminbraindump.com/post/azuread-guest-users/Connect.png"
width="965"
height="223"
srcset="https://adminbraindump.com/post/azuread-guest-users/Connect_hu6212128955751733444.png 480w, https://adminbraindump.com/post/azuread-guest-users/Connect_hu5430135240932876252.png 1024w"
loading="lazy"
alt="Is anyone else tired of these &amp;ldquo;welcome messages&amp;rdquo; in Powershell modules?"
class="gallery-image"
data-flex-grow="432"
data-flex-basis="1038px"
>&lt;/p>
&lt;h3 id="declare-variables">Declare variables&lt;/h3>
&lt;p>For SSO configurations, I always lock down the EntraID Enterprise App to only allow authentication for users in a particular Security Group. One thing to note here is that Guest Users can ONLY be added to a cloud security group and CANNOT be added to a security group that has been synced up from OnPrem AD via EntraID Connect. Adding these Guest Users to this cloud group is what grants them the ability within EntraID to authenticate against the Enterprise App and SSO. There&amp;rsquo;s a few ways to grab this group using &lt;code>Get-MgGroup&lt;/code> but I&amp;rsquo;ve found searching by display name to be the most convenient; in this case the group is &amp;lsquo;ASG_demo_sso_guests.&amp;rsquo; We&amp;rsquo;re setting &lt;code>$i&lt;/code> to 0 now so we can use it as a counter to output the total number of Guest Users created.&lt;/p>
&lt;p>&lt;img src="https://adminbraindump.com/post/azuread-guest-users/variables.png"
width="1028"
height="41"
srcset="https://adminbraindump.com/post/azuread-guest-users/variables_hu16767548113899453257.png 480w, https://adminbraindump.com/post/azuread-guest-users/variables_hu16478814754036374529.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="2507"
data-flex-basis="6017px"
>&lt;/p>
&lt;h3 id="creating-the-guest-users">Creating the Guest Users&lt;/h3>
&lt;p>Guest user accounts are created by what MS calls an &amp;ldquo;Invitation.&amp;rdquo; The default behavior when creating these is to send out an email invite that the user interacts with to accept. In most cases, this email causes confusion and generates helpdesk calls so I typically suppress it with &lt;code>-SendInvitationMessage:$false&lt;/code>. As mentioned above, the CSV that was provided had users&amp;rsquo; first names in all caps but ideally users would have the first letter of each name capitalized. To fix this before creating the users, we leverage the &lt;code>ToTitleCase&lt;/code> method of the &lt;code>Get-Culture&lt;/code> cmdlet; this will capitalize the first letter lowercase the rest. I know this works well when location is set to US but I have not tested it outside of that. One nuance of &lt;code>ToTitleCase&lt;/code> is that it assumes anything that is all caps is an acronym and doesn&amp;rsquo;t change any of the casing. Since the first names in our CSV are all caps, we can get around this by converting the names to all lowercase while pulling them into &lt;code>ToTitleCase&lt;/code>. The below foreach loop will confirm that a Guest User does not already exist for the email address then create a Guest User with the email address while converting the casing of the First and Last names to create the DisplayName (backticks used for formatting).&lt;/p>
&lt;p>&lt;img src="https://adminbraindump.com/post/azuread-guest-users/createGuests.png"
width="1131"
height="289"
srcset="https://adminbraindump.com/post/azuread-guest-users/createGuests_hu350930896096550809.png 480w, https://adminbraindump.com/post/azuread-guest-users/createGuests_hu8179151544821243949.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="391"
data-flex-basis="939px"
>&lt;/p>
&lt;h3 id="optional-while-loop">Optional: While Loop&lt;/h3>
&lt;p>My experience has been that the time it takes for Guest Users to be created and available to make changes to varies pretty widely. I&amp;rsquo;ve seen them be available near-instant and I&amp;rsquo;ve seen them take 5-10 minutes. Personally, I did not include a &lt;code>While&lt;/code> loop in my script to avoid it taking an extremely long time to complete but if you want a single repeatable script for creating Guest Users I would recommend one. As an example, here&amp;rsquo;s one that will check for the existance of the Guest User account but, importantly, give up after 60 seconds.&lt;/p>
&lt;p>&lt;img src="https://adminbraindump.com/post/azuread-guest-users/whileLoop.png"
width="903"
height="77"
srcset="https://adminbraindump.com/post/azuread-guest-users/whileLoop_hu16059215968782484945.png 480w, https://adminbraindump.com/post/azuread-guest-users/whileLoop_hu2654242581504680889.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="1172"
data-flex-basis="2814px"
>&lt;/p>
&lt;h3 id="adding-the-additional-attributes-and-other-changes">Adding the additional attributes and other changes&lt;/h3>
&lt;p>Now that the Guest Users exist, adding attributes is relatively simple and straight forward. Since we are making multiple changes to every user on this list (setting FirstName, setting LastName, and adding user to the security group), we will make all the changes as part of a single &lt;code>foreach&lt;/code> loop. One thing to note is that while earlier we ensured to only attempt to create a Guest User if one didn&amp;rsquo;t already exist, we want to make these next changes to every Guest User in the CSV, regardless of whether it existed prior. However, we also want to make sure that an output exists for any failures so we are made aware. Granted, since we&amp;rsquo;re using the same CSV there should be no failures, but it&amp;rsquo;s always good to throw in an extra line or two that helps the confidence of the script output.&lt;/p>
&lt;p>&lt;img src="https://adminbraindump.com/post/azuread-guest-users/setAttributes.png"
width="820"
height="287"
srcset="https://adminbraindump.com/post/azuread-guest-users/setAttributes_hu15760581013605393147.png 480w, https://adminbraindump.com/post/azuread-guest-users/setAttributes_hu4543309082533388470.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="285"
data-flex-basis="685px"
>&lt;/p>
&lt;h3 id="put-it-all-together">Put it all together&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>$csv = Import-Csv -Path &amp;lt;path to csv&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Connect-MgGraph -Scopes User.Invite.All,User.ReadWrite.All,Directory.ReadWrite.All
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$group = Get-MgGroup -Search &lt;span style="color:#e6db74">&amp;#34;DisplayName:ASG_demo_sso_guests&amp;#34;&lt;/span> -ConsistencyLevel eventual
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$i = &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">foreach&lt;/span> ($guest &lt;span style="color:#66d9ef">in&lt;/span> $csv) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $user = Get-MgUser -Search &lt;span style="color:#e6db74">&amp;#34;mail:&lt;/span>$($guest.EmailAddress)&lt;span style="color:#e6db74">&amp;#34;&lt;/span> -ConsistencyLevel eventual -ea SilentlyContinue
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (!($user)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> New-MgInvitation `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -InvitedUserEmailAddress $($guest.EmailAddress) `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -InviteRedirectUrl &lt;span style="color:#e6db74">&amp;#34;https://portal.office.com&amp;#34;&lt;/span> `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -InvitedUserDisplayName (Get-Culture).TextInfo.ToTitleCase(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>$($guest.FirstName.toLower())&lt;span style="color:#e6db74"> &lt;/span>$($guest.LastName.ToLower())&lt;span style="color:#e6db74">&amp;#34;&lt;/span>) `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -SendInvitationMessage:$false `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | Out-Null
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $i++
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Clear-Variable user
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Write-Output &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$i&lt;span style="color:#e6db74"> guest users created&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;# OPTIONAL to be incorporated in the foreach loop
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">$date = Get-Date
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">while (($null -eq $GuestUser) -and ((Get-Date) -le $date.AddSeconds(60))) {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> $GuestUser = Get-MgUser -Search &amp;#34;mail:$($guest.EmailAddress)&amp;#34; -ConsistencyLevel eventual
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> Start-Sleep -Seconds 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">foreach&lt;/span> ($guest &lt;span style="color:#66d9ef">in&lt;/span> $csv) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ($user) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Clear-Variable user
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $user = Get-MgUser -Search &lt;span style="color:#e6db74">&amp;#34;mail:&lt;/span>$($guest.EmailAddress)&lt;span style="color:#e6db74">&amp;#34;&lt;/span> -ConsistencyLevel eventual
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ($user) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Update-MgUser `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -UserId $user.Id `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -GivenName (Get-Culture).TextInfo.ToTitleCase($($guest.FirstName.toLower())) `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -Surname (Get-Culture).TextInfo.ToTitleCase($($guest.LastName.toLower()))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> New-MgGroupMember -GroupId $group.id -DirectoryObjectId $user.id
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Write-Output &lt;span style="color:#e6db74">&amp;#34;Unable to find account with email &lt;/span>$($guest.EmailAddress)&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>