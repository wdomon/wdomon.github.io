[{"content":"If you use a wildcard certificate on your onprem Exchange server, it is common that the CSR and certificate are generated outside of the Exchange environment and you are importing it into Exchange. If that\u0026rsquo;s the case, you don\u0026rsquo;t get an option for changing the Friendly Name of the certificate during the import process. This can result in Exchange listing multiple certificates with the same name on the Certificates page in ECP. Changing friendly name You would think that Microsoft would provide an intuitive way to change the friendly name of a certificate either within the ECP web GUI or at least through Powershell cmdlet. Unfortunately, Set-ExchangeCertificate does not exist and ECP does not give any options to modify the friendly name. Luckily, there is a quick and easy (albeit a bit unintutiive) way to change the friendly name of an Exchange certificate by leveraging a cmdlet that you wouldn\u0026rsquo;t expect to permanently change any attribute: Get-ExchangeCertificate. To do this, just access the FriendlyName attribute of the certificate in question and set/force the name you want in its place; I name my certificates with the Subject Name followed by the expiry year. Alternative method I have come across a couple scenarios where for some reason the above method didn\u0026rsquo;t work. The command wouldn\u0026rsquo;t output any errors, but the certificate just would not have a different friendly name afterwards. In those few examples, I used a slightly different method to accomplish the same thing. For this, we\u0026rsquo;re effectively doing the same thing but instead of using Exchange, we\u0026rsquo;re just leveraging Powershell\u0026rsquo;s Get-ChildItem to objectify the certificate we want. Keeping clear friendly names will help differentiate certificates no matter how those certificates are being viewed and avoid confusion for others on your team!\nCode (Get-ExchangeCertificate -Thumbprint \u0026#34;\u0026lt;thumbprint\u0026gt;\u0026#34;).FriendlyName = \u0026#39;*.domain.com_2023\u0026#39; #or (Get-ChildItem -Path \u0026#34;Cert:\\LocalMachine\\my\\\u0026lt;thumbprint\u0026gt;\u0026#34;).FriendlyName = \u0026#39;*.domain.com_2023\u0026#39; ","date":"2022-09-03T17:59:38-07:00","permalink":"https://www.adminbraindump.com/post/change-friendly-name-on-exchange-certificate/","title":"Change Friendly Name on Exchange Certificate"},{"content":"Sharepoint Online (SPO) management tools provided by Microsoft leave something to be desired, to say the least. The admin center web GUI is missing an enormous amount of functionality and the Powershell module is pretty unintuitive. While I don\u0026rsquo;t use a ton of SPO, I recently migrated a site to a different M365 tenant and had the need to set that site to a Read-Only state for a period of time (to ensure we had something to reference in the event someone reported that something was missing) and then disable access to it entirely. Using the SPO Powershell Module, you can quickly and easily change the LockState attribute of an SPO site.\nFirst connect to SPO using the administrative URL of your M365 tenant using the Connect-SPOService command. The administrtive URL you connect to is always the same format:\nConnect-SPOService -Url https://tenantname-admin.sharepoint.com\nOnce connected, set the LockState property of the site accordingly using the Set-SPOSite command. This property can accept three values:\nUnlocked - Default state, site is available ReadOnly - Site is in a view only state so no changes can be made. A message appears at the top of the site indicating that the administrator is preventing any changes from being made to this site. Permissions of folders can be viewed but whether or not those permissions are inheriting NoAccess - Disables the site entirely. If the tenant has a value for NoAccessRedirectUrl then all traffic will be forward to that URL. If that value is not set, then a 403 error will be returned for all visitors of the site. Connect-SPOService -Url \u0026#34;https://tenantname-admin.sharepoint.com\u0026#34; Set-SPOSite -Identity \u0026#34;https://tenantname.sharepoint.com/sites/Company\u0026#34; -LockState \u0026#34;ReadOnly\u0026#34; ","date":"2022-08-29T16:03:16-07:00","permalink":"https://www.adminbraindump.com/post/sharepoint-online-site-lock/","title":"Set a Sharepoint Online site to Read-Only or Disabled"},{"content":"Creating a new post using hugo is literally a one-liner. Just make sure to set the path inside the \u0026lsquo;post\u0026rsquo; folder.\nAfter creating the post, update/save the markdown file then commit and push to the Github repo.\n","date":"2022-08-27T18:46:26-07:00","permalink":"https://www.adminbraindump.com/post/hugo-new-post/","title":"Create a new post in Hugo"},{"content":"If malicious/suspicious user activity (scanning, auth attempts, etc.) is detected on an Azure App Service, blocking the source IP is often the quickest way to prevent further activity. To do so, it\u0026rsquo;s as easy as adding a Network rule to the app service that blocks that IP/range.\nRequirements Azure Az Powershell Module #Backticks for formatting Add-AzWebAppAccessRestrictionRule ` -ResourceGroupName \u0026#34;ResourceGroup\u0026#34; ` -WebAppName \u0026#34;AppName\u0026#34; ` -Name \u0026#34;Ip example rule\u0026#34; ` #Friendly name of rule -Priority 100 ` #If this app is publicly available, make sure this priority is lower than the priority of the 0.0.0.0/0 rule -Action Deny ` -IpAddress 122.133.144.155/32 #Same command one-liner Add-AzWebAppAccessRestrictionRule -ResourceGroupName \u0026#34;ResourceGroup\u0026#34; -WebAppName \u0026#34;AppName\u0026#34; -Name \u0026#34;Ip example rule\u0026#34; -Priority 100 -Action Deny -IpAddress 122.133.144.155/32 Doing things the old way In the Azure web GUI, access the app service in question and click the \u0026ldquo;Networking\u0026rdquo; navigation blade on the left.\nClick \u0026ldquo;Access restriction\u0026rdquo;\nClick \u0026ldquo;Add rule\u0026rdquo;\nGive the rule a name, change the toggle to \u0026ldquo;Deny,\u0026rdquo; set a priority for the rule (if this is a publicly available app service, make sure to set the new rule with a lower priority than the \u0026ldquo;Allow All\u0026rdquo; rule that exists (0.0.0.0/0), add the CIDR notation of the IP address in question, and click the \u0026ldquo;Add rule\u0026rdquo; button to save the changes. All traffic from that IP address will immediately be blocked.\n","date":"2022-08-27T18:01:14-07:00","permalink":"https://www.adminbraindump.com/post/azure-app-service-block-ip/","title":"Block an IP address on Azure App Service"}]